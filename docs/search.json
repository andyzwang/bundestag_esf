{
  "articles": [
    {
      "path": "data.html",
      "title": "Daten und Methodik",
      "author": [],
      "contents": "\nEs gibt keine zentrale Datenbank für einzelne ESF+-Projekte in Deutschland, die öffentlich zugänglich ist. Daher werden in diesem Projekt die ESF+-Daten der 16 Bundesländer und des Bundes in einem einheitlichen Format zusammengeführt und mit Informationen über die geografischen Gegebenheiten auf verschiedenen Ebenen versehen.\nMethodik\nGeografische Vereinheitlichung\nDie Projekte werden auf den geografischen Ebenen Stadt, Postleitzahl (PLZ), Bundestagswahlkreis (BWK) und Bundesland ausgewiesen.\nPLZ-BWK\nDas Statistische Bundesamt veröffentlicht zwar einen Querverweis zwischen Wahlkreisen und Postleitzahlen, aber diese Daten sind nicht vollständig, da sie einen Eintrag für jede Gemeinde, den zugehörigen BWK und die primäre Postleitzahl der Verwaltung enthalten.1 Das BFS hat keine vollständigen Daten veröffentlicht, angeblich aus Gründen des Urheberrechts.2\nOpen-Source und öffentlich verfügbar PLZ und BWK GeoJSON-Dateien wurde verwendet, um einen Querverweis zwischen den beiden zu schaffen. Das R-Paket sf wurde verwendet, um die Grenzen dieser beiden Schichten zu vergleichen.\n\nPLZ-BWK Querverweis R Code [Live]\n  library(sf)\n  library(dplyr)\n  library(purrr)\n  library(stringr)\n  library(janitor)\n  \n  ## DATA IMPORT\n  # Load PLZ shapefiles\n  plz <- st_read(\"raw/shape_files/plz5.geojson\") %>%\n    clean_names() %>%\n    select(plz, note, everything()) %>%\n    rename(\n      plz_name = note,\n      plz_einwohner = einwohner,\n      plz_qkm = qkm\n    ) %>%\n    mutate(\n      plz_name = str_replace(plz_name, paste(plz, \" \", sep = \"\"), \"\"),\n      plz_name = str_replace(plz_name, \"  \", \" \")\n    ) %>%\n    filter(\n      plz_einwohner > 10\n    )\n  \n  # Load wahlkreis names\n  wk_namen <- read.csv(\"raw/wahlkreisnamen.csv\", skip = 7) %>%\n    select(-LAND_NR, -LAND_ABK)\n  \n  # Load BWK data\n  bwk <- st_read(\"raw/shape_files/wkr.json\") %>%\n    select(WKR_NR, LAND_NR) %>%\n    inner_join(wk_namen, by = c(\"WKR_NR\")) %>%\n    clean_names() %>%\n    select(wkr_nr, wkr_name, land_nr, land_name)\n  \n  ## FULLY CONTAINED DISTRICTS\n  # Identify all PLZs that are fully enclosed within BWKs (obs: 2815)\n  \n  full_contains <- st_join(bwk, plz, join = st_contains_properly) %>%\n    mutate(wk_pct = 1) %>%\n    st_drop_geometry()\n  \n  # filter out the list of remaining PLZs\n  plz <- plz %>%\n    filter(!plz %in% full_contains$plz)\n  \n  ## PARTIALLY CONTAINED DISTRICTS\n  # Identify PLZs that partially overlap multiple BWKs\n  \n  partial_matches <- st_join(plz, bwk, join = st_overlaps)\n  \n  # Manually coding out Augsburg 253 exceptions\n  augsburg_plz <- c(\"82297\", \"86154\", \"86156\", \"86316\", \"86356\", \"86368\", \n                    \"86391\", \"86399\", \"86405\", \"86415\", \"86420\", \"86424\", \n                    \"86438\", \"86441\", \"86444\", \"86465\", \"86485\", \"86494\", \n                    \"86495\", \"86504\", \"86507\", \"86508\", \"86510\", \"86511\", \n                    \"86551\", \"86559\", \"86568\", \"86577\", \"86672\", \"86678\", \n                    \"86679\", \"86695\", \"86707\", \"86830\", \"86836\", \"86850\", \n                    \"86853\", \"86856\", \"86863\", \"86868\", \"86872\", \"86877\")\n  augsburg_oddity <- partial_matches %>%\n    filter(wkr_nr == 253 & plz %in% augsburg_plz) %>%\n    select(plz, plz_name, wkr_nr, wkr_name, land_nr, land_name, \n           plz_einwohner, plz_qkm, geometry) %>%\n    mutate(\n      wk_pct = NA\n    ) %>%\n    st_drop_geometry()\n  \n  # arrange by number for easier tracking\n  partial_matches <- partial_matches %>%\n    arrange(plz) %>%\n    filter(!wkr_nr == 253)\n  \n  # setting a function to find shared area for each row\n  calculate_intersection_area <- function(plz_code, wahlkreis_nummer) {\n    plz_geom <- plz %>%\n      filter(plz == plz_code) %>%\n      st_geometry()\n    bwk_geom <- bwk %>%\n      filter(wkr_nr == wahlkreis_nummer) %>%\n      st_geometry()\n    intersection_geom <- st_intersection(plz_geom, bwk_geom)\n    if (!is.null(intersection_geom)) {\n      cat(paste(plz_code, \".\", sep = \"\"))\n      return(st_area(intersection_geom))\n    } else {\n      return(0)\n    }\n  }\n  \n  # time for some base r baby! calculating the areas of the intersections purrr\n  partial_matches$intersection_area <- pmap_dbl(\n    list(partial_matches$plz, partial_matches$wkr_nr), \n    calculate_intersection_area\n    )\n  \n  partial_matches <- partial_matches %>%\n    # finding the area of the PLZ itself\n    mutate(\n      plz_area = as.numeric(str_replace(st_area(geometry), \" \\\\[m\\\\^2\\\\]\", \"\")),\n      wk_pct = intersection_area / plz_area\n    ) %>%\n    st_drop_geometry()\n  \n  # apply tolerance\n  partial_matches <- partial_matches %>%\n    filter(wk_pct > .25) %>%\n    clean_names() %>%\n    select(plz, plz_name, wkr_nr, wkr_name, land_nr, \n           land_name, plz_einwohner, plz_qkm, wk_pct)\n  \n  # 94 PLZ have multiple WK associated with them\n  repeat_num <- partial_matches[c(\"plz\", \"wkr_nr\")] %>%\n    group_by(plz) %>%\n    summarize(count = n()) %>%\n    ungroup() %>%\n    group_by(count) %>%\n    summarise(n())\n  \n  # time for the big bad boy\n  final_df <- rbind(rbind(full_contains, partial_matches), augsburg_oddity) %>%\n    filter(!is.na(plz)) %>%\n    arrange(plz) %>%\n    select(plz, plz_name, wkr_nr, wkr_name, land_nr, land_name, \n           plz_einwohner, plz_qkm, wk_pct)\n  \n  # reset row names\n  row.names(final_df) <- NULL\n  \n  # tada!!\n  library(openxlsx)\n  write.xlsx(final_df, \"output/geo/plz_wkr_bridge.xlsx\")\n  write.csv(final_df, \"output/geo/plz_wkr_bridge.csv\", fileEncoding = \"UTF-8\")\n  saveRDS(final_df, file = \"output_data/geo/plz_wkr_bridge.rds\")\n2.815 PLZ sind ausschließlich in einem Wahlkreis enthalten. Die übrigen PLZ wurden paarweise mit allen Wahlbezirken auf räumliche Überschneidungen verglichen, wobei 12.119 PLZ-BWK-Paare entstanden. Auf der Grundlage einer Schwellenwertanalyse wurde für jedes PLZ-BWK-Paar ein Schwellenwert von 25 % PLZ-Abdeckung festgelegt.3\n\nPLZ-BWK Treshold Table\n\n\n\nLetztendlich wurden 8.256 PLZs den 299 Wahlbezirken zugeordnet, wobei 91 Postleitzahlen auf 2 Wahlbezirke und 2 auf 3 Wahlbezirke verteilt waren [CSV][RData][XLSX].\nESF+-Ziele\nGeografische Informationen\nDatenquellen\nEuropean Social Funds+\nNordrhein Westfalen [XLSX]: Ministerium für Arbeit, Gesundheit und Soziales, 31.12.2023.\nGeocoding\nPostleitzahl Shapefile [GeoJSON]: Postleitzahlen Deutschland, 15.7.2023.4\nBundestagwahlkreise Shapefile [GeoJSON]: Bundeswahlleiter, 15.04.2020.\nNamen der Bundestagswahlkreise [CSV]: Bundeswahlleiter, 15.04.2020.\n\nStatistisches Bundesamt, stand 7.1.2021↩︎\n“Aus lizenzrechtlichen Gründen darf das Statistische Bundesamt das vollständige Postleitzahlenverzeichnis (Urheber ist die Deutsche Post AG mit dem Produkt DATAFACTORY STREETCODE) nicht verbreiten. Der Lizenzvertrag mit der deutschen Post gestattet uns Auswertungen ausschließlich für interne Zwecke. Ohnehin ist jedoch eine Zuordnung von Postleitzahlen und Wahlkreisen in vielen Fällen nicht eindeutig möglich, da die Postleitzahlengebiete üblicherweise nicht entlang der Wahlkreisgrenzen verlaufen. Darüber hinaus liegt uns als kleinste systematisierte Gebietseinheit bei der Wahlkreiseinteilung die Gemeinde als Ganzes vor. Bei Gemeinden, die durch mehrere Wahlkreise ‘geteilt’ sind, fehlt uns eine weitere Differenzierung (z.B. nach Stadtteil, Bezirk, Straße), so dass hier ebenso eine eindeutige Zuordnung der Postleitzahlen nicht möglich ist” [FragDenStaat, 26.2.2021].↩︎\nInsbesondere fielen mehr als 6.000 Paare aus der Tabelle heraus, wenn eine triviale Schwelle von 1 % räumlicher Abdeckung festgelegt wurde.↩︎\nOpen Database License↩︎\n",
      "last_modified": "2024-04-11T18:57:40+02:00"
    },
    {
      "path": "index.html",
      "title": "ESF+ Database",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2024-04-11T18:57:40+02:00"
    },
    {
      "path": "nrw.html",
      "title": "Nordrhein-Westfalen",
      "author": [],
      "contents": "\n\n\n\n\nDownload as CSV\n\n\n\n\n\n",
      "last_modified": "2024-04-11T18:57:41+02:00"
    }
  ],
  "collections": []
}
